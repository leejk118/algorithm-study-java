package main.day0907.leetcode_40;

import javax.xml.validation.Validator;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.*;

class leetcode_40_pcc224 {
    /**
     * https://leetcode.com/problems/combination-sum-ii/
     *
     * 40. Combination Sum II
     *  find all unique combinations in candidates where the candidate numbers sum to target.
     */
    public static List<List<Integer>> combinationSum(int[] candidates, int target) {
        List<List<Integer>> answer = new ArrayList<>();
        ArrayList<Integer> combination = new ArrayList<>();

        Arrays.sort(candidates);
        backtracking(answer, combination, candidates, target, 0, 0);

        return answer;
    }

//    Runtime: 4 ms, faster than 89.77%
//    Memory Usage: 43.7 MB, less than 74.74%
    private static void backtracking(List<List<Integer>> answer, ArrayList<Integer> combination, int[] candidates, int target, int total, int start) {
        if (total == target) {
            answer.add(new ArrayList<>(combination));
            return;
        }

       int value;
       int sum;
       for (int i = start; i < candidates.length; i++) {
//          단순한 배열 값의 참조, 연산 값에 대한 저장이 결과에 큰 차이를 내지 않음
//           Runtime: 5 ms, faster than 74.25%
//           Memory Usage: 43.6 MB, less than 74.74%
           value = candidates[i];
           sum = total + value;

           if (sum > target) {
               return;
           }

           if (i > start && candidates[i - 1] == value) {
               continue;
           }

           combination.add(value);
           backtracking(answer, combination, candidates, target, total + value, i + 1);
           combination.remove(combination.size() - 1);
       }
    }




    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

        int[] candidates1 = {10,1,2,7,6,1,5};
        int target1 = 8;

        int[] candidates2 = {2,5,2,1,2};
        int target2 = 5;


        System.out.println(combinationSum(candidates2, target2));
    }
}

